load(String.raw`
	(1)(Class)Rect(/1)
	(p)
		A data structure for storing axis aligned rectangles.
	(/p)
	(2)Type(/2)
	(p)**
	class Rect extends #Polygon# { ... }
	**(/p)
	(2)Syntax(/2)
	(p)**
	new Rect(x, y, width, height)
	**(/p)
	(2)Parameters(/2)
	(p)
		(param:x $Number$)The x coordinate of the upper left corner of the rectangle.(/param)
		(param:y $Number$)The y coordinate of the upper left corner of the rectangle.(/param)
		(param:width $Number$)The width of the rectangle.(/param)
		(param:height $Number$)The height of the rectangle.(/param)
	(/p)
	(2)Properties(/2)
	(p)
		(prop:x $Number$)The x coordinate of the upper left corner of the rectangle.(/prop)
		(prop:y $Number$)The y coordinate of the upper left corner of the rectangle.(/prop)
		(prop:width $Number$)The width of the rectangle.(/prop)
		(prop:height $Number$)The height of the rectangle.(/prop)
		(prop:min $Vector2$readonly)The upper left corner of the rectangle.(/prop)
		(prop:max $Vector2$readonly)The lower right corner of the rectangle.(/prop)
		(prop:xRange $Range$readonly)The span of the rectangle along the x axis.(/prop)
		(prop:yRange $Range$readonly)The span of the rectangle along the y axis.(/prop)
	(/p)
	(2)Methods(/2)
	(p)
		(method:clip@rectangle@$Rect$)
			Returns the region of the caller that is inside the given rectangle.
			(2)Parameters(/2)
			(p2)
				(param:rectangle $Rect$)The clipping rectangle.(/param)
			(/p2)
		(/method)
		(method:largestWithin@bound@$Rect$)
			Returns the largest rectangle that can fit inside the given bound while having the same aspect ratio as the caller.
			(2)Parameters(/2)
			(p2)
				(param:bound $Rect$) The maximum possible size of the rectangle regardless of aspect ratio.(/param)
			(/p2)
		(/method)
		(method:packInOrder@rects@$Rect[]$)
			Mutates the position of the given rectangles to fit them in order (left to right, top to bottom) into the caller, ignoring the height boundary.
			Returns the argument.
			(2)Parameters(/2)
			(p2)
				(param:rects $Rect[]$) The rects to be packed.(/param)
			(/p2)
		(/method)
		(method:pack@rects@$Rect[]$)
			Mutats the position of the given rectangles to fit them optimally into the caller, ignoring the height boundary.
			Returns the argument.
			(2)Parameters(/2)
			(p2)
				(param:rects $Rect[]$) The rects to be packed.(/param)
			(/p2)
		(/method)
		(method:Rect.fromMinMax@min, max@$Rect$)
			Returns a rectangle with a given upper left and lower right corner.
			(2)Parameters(/2)
			(p2)
				(param:min $Vector2$)The upper left corner of the new rectangle.(/param)
				(param:max $Vector2$)The lower right corner of the new rectangle.(/param)
			(/p2)
		(/method)
		(method:Rect.fromRanges@xRange, yRange@$Rect$)
			Returns a rectangle with the given x and y ranges.
			(2)Parameters(/2)
			(p2)
				(param:xRange $Range$)The span of the rectangle on the x axis.(/param)
				(param:yRange $Range$)The span of the rectangle on the y axis.(/param)
			(/p2)
		(/method)
		(method:Rect.bound@points@$Rect$)
			Returns the smallest rectangle that contains all the given points.
			(2)Parameters(/2)
			(p2)
				(param:points $Vector2[]$)The points to be bounded.(/param)
			(/p2)
		(/method)
		(method:Rect.composeBoundingBoxes@boxes@$Rect$)
			Returns the smallest rectangle that contains all of the given rectangles.
			(2)Parameters(/2)
			(p2)
				(param:boxes $Rect[]$)The boxes to be bounded.(/param)
			(/p2)
		(/method)
	(/p)
`);