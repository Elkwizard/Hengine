load(String.raw`
	(1)(Class)Texture(/1)
	(p)
		A Texture is a data structure to represent a 2D grid of #Color#s or pixels.
		Textures are modifiable and readable at the pixel level, and can be used for CPU level shader calculations.
		Textures are initialized with all transparent black pixels.
	(/p)
	(2)Type(/2)
	(p)**
	class Texture extends #ImageType# { ... }
	**(/p)
	(2)Syntax(/2)
	(p)**
		new Texture(width, height)
	**(/p)
	(2)Parameters(/2)
	(p)
		(param:width $Number$)The width, in CSS Pixels, of the Texture.(/param)
		(param:height $Number$)The height, in CSS Pixels, of the Texture.(/param)
	(/p)
	(2)Properties(/2)
	(p)
		(prop:pixels $Color[][]$readonly)A 2D array, indexed with *[x][y]*, storing the pixel data of the Texture.(/prop)
		(prop:loops $Boolean$)Whether or not *.getPixel* calls will loop to the other side of the Texture if they overflow.(/prop)
		(prop:red $Number[][]$readonly)A 2D array, indexed with *[x][y]*, storing the *.red* channel of each #Color# in the Texture.(/prop)
		(prop:green $Number[][]$readonly)A 2D array, indexed with *[x][y]*, storing the *.green* channel of each #Color# in the Texture.(/prop)
		(prop:blue $Number[][]$readonly)A 2D array, indexed with *[x][y]*, storing the *.blue* channel of each #Color# in the Texture.(/prop)
		(prop:alpha $Number[][]$readonly)A 2D array, indexed with *[x][y]*, storing the *.alpha* channel of each #Color# in the Texture.(/prop)
		(prop:brightness $Number[][]$readonly)A 2D array, indexed with *[x][y]*, storing the *.brightness* for each #Color# in the Texture.(/prop)
	(/p)
	(2)Methods(/2)
	(p)
		(method:clear@@$void$)
			Clears the Texture back to its initial transparent black.
		(/method)
		(method:getPixel@x, y@$Color$)
			Returns the #Color# of the pixel at the specified location in the Texture.
			(2)Parameters(/2)
			(p2)
				(param:x $Number$)The X coordinate of the pixel.(/param)
				(param:y $Number$)The Y coordinate of the pixel.(/param)
			(/p2)
		(/method)
		(method:setPixel@x, y, color@$void$)
			Sets the #Color# of the pixel at the specified location in the Texture.
			(2)Parameters(/2)
			(p2)
				(param:x $Number$)The X coordinate of the pixel.(/param)
				(param:y $Number$)The Y coordinate of the pixel.(/param)
				(param:color $Color$)The new #Color# for the pixel.(/param)
			(/p2)
		(/method)
		(method:clip@x, y, width, height | region@$Texture$)
			Returns a Texture representation of the pixels within the specified rectangle.
			(2)Parameters(/2)
			(p2)
				(param:x $Number$)The X coordinate of the left extent of the rectangle.(/param)
				(param:y $Number$)The Y coordinate of the top extent of the rectangle.(/param)
				(param:width $Number$)The width of the rectangle.(/param)
				(param:height $Number$)The height of the rectangle.(/param)
				(param:region $Rect$)A #Rect# object containing the rectangular region.(/param)
			(/p2)
		(/method)
		(method:stretch@width, height@$Texture$)
			Returns a Texture representation of the Texture after being rescaled.
			(param:width $Number$)The width of the rescaled Texture.(/param)
			(param:height $Number$)The height of the rescaled Texture.(/param)
		(/method)
		(method:get@@$Texture$) 
			Returns a copy of the Texture.
		(/method)
		(method:Texture.fromImageType@imageType, x, y, width, height | renderer, region@$Texture$)
			Returns a Texture representation of the pixels within the specified region in the given #ImageType#.
			(2)Parameters(/2)
			(p2)
				(param:imageType $ImageType$)The #ImageType# that the pixels are to be sampled from.(/param)
				(param:x $Number$)The X coordinate of the left extent of the rectangle.(/param)
				(param:y $Number$)The Y coordinate of the top extent of the rectangle.(/param)
				(param:width $Number$)The width of the rectangle.(/param)
				(param:height $Number$)The height of the rectangle.(/param)
				(param:region $Rect$)A #Rect# object containing the rectangular region.(/param)
			(/p2)
		(/method)
		(method:Texture.grayScale@brightness@$Texture$)
			Returns a gray scale Texture based on the brightness values provided. 
			(2)Parameters(/2)
			(p2)
				(param:brightness $Number[][]$)A 2D array of *#Color#.brightness* values indexed as *[x][y]*.(/param)
			(/p2)
		(/method)
		(method:Texture.colorScale@color, brightness@$Texture$)
			Returns a mono-color Texture based on the brightness values provided. 
			(2)Parameters(/2)
			(p2)
				(param:color $Color$)A #Color# to be multiplied by all of the provided brightness values.(/param)
				(param:brightness $Number[][]$)A 2D array of *#Color#.brightness* values indexed as *[x][y]*.(/param)
			(/p2)
		(/method)
		(method:Texture.fromDataURI@uri, width, height@$Texture$async)
			Constructs and returns a Texture representation of an image from a DataURI at a specified resolution.
			(2)Parameters(/2)
			(p2)
				(param:uri $String$)The DataURI representation of the image.(/param)
				(param:width $Number$)The scaled width of the Texture.(/param)
				(param:height $Number$)The scaled height of the Texture.(/param)
			(/p2)
		(/method)
	(/p)
`);