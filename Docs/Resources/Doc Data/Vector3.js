load(String.raw`
	(1)(Class)Vector3(/1)
	(p)
		A data structure for storing three dimensional vectors.
	(/p)
	(2)Type(/2)
	(p)**
	class Vector3 extends #Vector# { ... }
	**(/p)
	(2)Syntax(/2)
	(p)**
	new Vector3(x, y, z)
	**(/p)
	(2)Parameters(/2)
	(p)
		(param:x $Number$)The x component of the Vector3.(/param)
		(param:y $Number$)The y component of the Vector3.(/param)
		(param:z $Number$)The z component of the Vector3.(/param)
	(/p)
	(2)Properties(/2)
	(p)
		(prop:x $Number$)The x component of the Vector3.(/prop)
		(prop:y $Number$)The y component of the Vector3.(/prop)
		(prop:z $Number$)The z component of the Vector3.(/prop)
		(prop:Vector3.[left, right, up, down, forward, backward]$Vector3$readonly)The unit vectors in the given directions.(/prop)
		(prop:Vector3.origin $Vector3$readonly)The origin vector.(/prop)
	(/p)
	(2)Methods(/2)
	(p)
		(method:rotateAboutAxis@axis, angle@$Vector3$)
			Rotates the caller by the given angle about the given axis and then returns it.
			(2)Parameters(/2)
			(p2)
				(param:axis $Vector3$)The axis to rotate around.(/param)
				(param:angle $Number$)The angle to rotate by.(/param)
			(/p2)
		(/method)
		(method:rotatedAboutAxis@axis, angle@$Vector3$)
			Returns a copy of the caller rotated by the given angle about the given axis.
			(2)Parameters(/2)
			(p2)
				(param:axis $Vector3$)The axis to rotate around.(/param)
				(param:angle $Number$)The angle to rotate by.(/param)
			(/p2)
		(/method)
		(method:cross@v@$Number$)
			Returns the 3D cross product of the caller and a given vector.
			(2)Parameters(/2)
			(p2)
				(param:v $Vector3$)The second vector in the cross product.(/param)
			(/p2)
		(/method)
		(method:Vector3.fromPoint@point@$Vector3$)
			Returns a Vector3 with the x, y and z properties copied from the given object.
			(2)Parameters(/2)
			(p2)
				(param:point $Object$)An object with x, y and z properties to turn into a Vector3.(/param)
			(/p2)
		(/method)
		(method:Vector3.x@x@$Vector3$)
			Returns a horizontal Vector3 with a given x component.
			(2)Parameters(/2)
			(p2)
				(param:x $Number$)The x component of the Vector3.(/param)
			(/p2)
		(/method)
		(method:Vector3.y@y@$Vector3$)
			Returns a vertical Vector3 with a given y component.
			(2)Parameters(/2)
			(p2)
				(param:y $Number$)The y component of the Vector3.(/param)
			(/p2)
		(/method)
		(method:Vector3.z@z@$Vector3$)
			Returns a front-to-back Vector3 with a given z component.
			(2)Parameters(/2)
			(p2)
				(param:z $Number$)The z component of the Vector3.(/param)
			(/p2)
		(/method)
	(/p)
`);