load(String.raw`
	(1)(Class)Animation(/1)
	(p)
		An Animation is a data structure that represents a series of #ImageType#s or #HImage#s that can be played back in sequence. 
		Animations can be created from either procedurally created frames or those sourced from the file system.
	(/p)
	(2)Type(/2)
	(p)**
	class Animation extends #ImageType# { ... }
	**(/p)
	(2)Syntax(/2)
	(p)**
	new Animation(folder, frameCount, delay[, loops, onEnd]) 
	new Animation(frames, delay[, loops, onEnd]) 
	**(/p)
	(2)Parameters(/2)
	(p)
		(param:folder $String$)The file path to the folder the images are being sourced from. The images should be named *1.png*, *2.png*, *3.png*, etc.(/param)
		(param:frameCount $Number$)The amount of images in the folder to be turned into an Animation.(/param)
		(param:frames $ImageType[]$)A list of #ImageType#s to use as engine frames of the Animation.(/param)
		(param:delay $Number$)The amount of engine frames spent on each frame of the Animation.(/param)
		(param:loops $Boolean$)Whether or not the Animation runs in a loop, resetting to frame 0 when it reaches the end, or not. Default is *false*.(/param)
		(param:onEnd $Function$)A callback to be triggered whenever the Animation reaches its final frame.(/param)
	(/p)
	(2)Properties(/2)
	(p)
		(prop:frames $ImageType[]$readonly)A list of #ImageType#s used as frames of the Animation.(/prop)
		(prop:frameCount $Number$readonly)The amount of images in *.frames*.(/prop)
		(prop:delay $Number$readonly)The amount of engine frames spent on each frame of the Animation.(/prop)
		(prop:stopped $Boolean$)Whether or not the Animation will advance each engine frame.(/prop)
		(prop:image $ImageType$)The current frame of the Animation.(/prop)
		(prop:totalTime $Number$readonly)The total amount of engine frames it takes the Animation to complete one cycle.(/prop)
		(prop:timer $Number$)The progress through the Animation, in engine frames. This value resets when it loops.(/prop)
		(prop:loops $Boolean$)Whether or not the Animation loops when it completes.(/prop)
		(prop:onEnd $Function$)A callback to be triggered whenever the Animation reaches its final frame.(/prop)
	(/p)
	(2)Methods(/2)
	(p)
		(method:stop@@ $void$)Pauses the progression of the Animation. *.timer* no longer increases.(/method)
		(method:start@@ $void$)Resumes the progression of the Animation. *.timer* begins increasing.(/method)
		(method:reset@@ $void$)Resets the Animation's progress back to the beginning. The next frame drawn will be the first one.(/method)
		(method:get@@ $Animation$)Creates a copy of the Animation.(/method)
		(method:Animation.fromImage@frame, imgWidth, imgHeight, delay[, loops, onEnd]@ $Animation$)
			Creates an Animation from a horizontal spritesheet stored in the provided #ImageType#.
			(2)Parameters(/2)
			(p2)
				(param:frame $ImageType$)The #ImageType# containing the horizontal spritesheet.(/param)
				(param:imgWidth $Number$)The width of an each frame of the Animation.(/param)
				(param:imgHeight $Number$)The height of each frame of the Animation.(/param)
				(param:delay $Number$)The amount of engine frames spent on each frame of the Animation.(/param)
				(param:loops $Boolean$)Whether or not the Animation runs in a loop, resetting to frame 0 when it reaches the end, or not. Default is *false*.(/param)
				(param:onEnd $Function$)A callback to be triggered whenever the Animation reaches its final frame.(/param)
			(/p2)
		(/method)
	(/p)
`);

