load(String.raw`
	(1)(Class)Transform(/1)
	(p)
		Transform is a data structure for storing translation and rotation. #SceneObject#s have Transforms to represent their position and rotation in space.
	(/p)
	(2)Type(/2)
	(p)**
	class Transform extends #Matrix3# { ... }
	**(/p)
	(2)Syntax(/2)
	(p)**
	new Transform(x, y, rotation)
	**(/p)
	(2)Parameters(/2)
	(p)
		(param:x $Number$)The translation of the object along the x axis.(/param)
		(param:y $Number$)The translation of the object along the y axis.(/param)
		(param:rotation $Number$)The rotation of the object about its center.(/param)
	(/p)
	(2)Properties(/2)
	(p)
		(prop:position $Vector2$)The translation of the object.(/prop)
		(prop:rotation $Number$)The rotation of the object about its center.(/prop)
		(prop:direction $Vector2$)The direction the object is facing as a #Vector2#.(/prop)
	(/p)
	(2)Methods(/2)
	(p)
		(method:rotateAround@point, rotation@$void$)
			Rotates the entire Transform about the given point by the given angle.
			(2)Parameters(/2)
			(p2)
				(param:point $Vector2$)The point to rotate around.(/param)
				(param:rotation $Number$)The amount to rotate.(/param)
			(/p2)
		(/method)
		(method:localSpaceToGlobalSpace@point@$Vector2$)
			Returns the result of applying the coordinate transform to the given point.
			(2)Parameters(/2)
			(p2)
				(param:point $Vector2$)The point to transform.(/param)
			(/p2)
		(/method)
		(method:globalSpaceToLocalSpace@point@$Vector2$)
			Returns the result of applying the inverse coordinate transform to the given point.
			(2)Parameters(/2)
			(p2)
				(param:point $Vector2$)The point to transform.(/param)
			(/p2)
		(/method)
		(method:drawInLocalSpace@render, renderer@$void$)
			Transforms the given renderer with the coordinate transform of the caller, calls the provided drawing function, and then transforms the renderer back.
			(2)Parameters(/2)
			(p2)
				(param:render $Function$)The rendering function to call while the renderer is in local space.(/param)
				(param:renderer $Artist$)The #Artist# to modify the transform of.(/param)
			(/p2)
		(/method)
		(method:drawInGlobalSpace@render, renderer@$void$)
			Transforms the given renderer with the inverse coordinate transform of the caller, calls the provided drawing function, and then transforms the renderer back.
			(2)Parameters(/2)
			(p2)
				(param:render $Function$)The rendering function to call while the renderer is in global space.(/param)
				(param:renderer $Artist$)The #Artist# to modify the transform of.(/param)
			(/p2)
		(/method)
		(method:drawWithoutRotation@render, renderer@$void$)
			Transforms the given renderer with the inverse rotation of the caller, calls the provided drawing function, and then transforms the renderer back.
			(2)Parameters(/2)
			(p2)
				(param:render $Function$)The rendering function to call while the renderer is not relatively rotated.(/param)
				(param:renderer $Artist$)The #Artist# to modify the transform of.(/param)
			(/p2)
		(/method)
		(method:get@@$Transform$)
			Returns a copy of the caller.
		(/method)
		(method:Transform.combine@transformA, transformB@$Transform$)
			Returns the result of applying transformA and then transformB.
			(2)Parameters(/2)
			(p2)
				(param:transformA $Transform$)The first coordinate transform.(/param)
				(param:transformB $Transform$)The second coordinate transform.(/param)
			(/p2)
		(/method)
	(/p)
`);